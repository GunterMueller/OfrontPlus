MODULE OfrontOPS;	(* NW, RC 6.3.89 / 18.10.92 *)		(* object model 3.6.92 *)
(*
2002-04-11  jt: Number changed for BlackBox 1.4: SHORT(-e)
*)

	IMPORT OPM := OfrontOPM;

	CONST
		MaxIdLen = 40;

	TYPE
		Name* = ARRAY MaxIdLen OF SHORTCHAR;
		String* = POINTER TO ARRAY OF SHORTCHAR;

	(* name, str, numtyp, intval, realval, lrlval are implicit results of Get *)

	VAR
		name-: Name;
		str-: String;
		numtyp-: SHORTINT; (* 1 = char, 2 = integer, 3 = real, 4 = longreal *)
		intval-: LONGINT;	(* integer value or string length (incl. 0X) *)
		realval-: SHORTREAL;
		lrlval-: REAL;

	(*symbols:
	    |  0          1          2          3          4
	 ---|--------------------------------------------------------
	  0 |  null       *          /          DIV        MOD
	  5 |  DIV0       REM0       &          +          -
	 10 |  OR         =          #          <          <=
	 15 |  >          >=         IN         IS         ^
	 20 |  .          ,          :          ..         )
	 25 |  ]          }          OF         THEN       DO
	 30 |  TO         BY         (          [          {
	 35 |  ~          :=         number     NIL        string
	 40 |  ident      ;          |          END        ELSE
	 45 |  ELSIF      UNTIL      IF         CASE       WHILE
	 50 |  REPEAT     FOR        LOOP       WITH       EXIT
	 55 |  RETURN     ARRAY      RECORD     POINTER    BEGIN
	 60 |  CONST      TYPE       VAR        PROCEDURE  IMPORT
	 65 |  MODULE     OUT        $          eof    *)

	CONST
		(* numtyp values *)
		char = 1; integer = 2; real = 3; longreal = 4;

		(*symbol values*)
		null = 0; times = 1; slash = 2; div = 3; mod = 4;
		div0 = 5; rem0 = 6; and = 7; plus = 8; minus = 9;
		or = 10; eql = 11; neq = 12; lss = 13; leq = 14;
		gtr = 15; geq = 16; in = 17; is = 18; arrow = 19;
		period = 20; comma = 21; colon = 22; upto = 23; rparen = 24;
		rbrak = 25; rbrace = 26; of = 27; then = 28; do = 29;
		to = 30; by = 31; lparen = 32; lbrak = 33; lbrace = 34;
		not = 35; becomes = 36; number = 37; nil = 38; string = 39;
		ident = 40; semicolon = 41; bar = 42; end = 43; else = 44;
		elsif = 45; until = 46; if = 47; case = 48; while = 49;
		repeat = 50; for = 51; loop = 52; with = 53; exit = 54;
		return = 55; array = 56; record = 57; pointer = 58; begin = 59;
		const = 60; type = 61; var = 62; procedure = 63; import = 64;
		module = 65; out = 66; dollar = 67; eof = 68;

	VAR
		ch: SHORTCHAR;     (*current character*)

	PROCEDURE err(n: SHORTINT);
	BEGIN OPM.err(n)
	END err;

	PROCEDURE Str(VAR sym: BYTE);
		VAR i: INTEGER; och: SHORTCHAR;
			s: ARRAY 256 OF SHORTCHAR; t: String;
	BEGIN i := 0; och := ch;
		LOOP OPM.Get(ch);
			IF ch = och THEN EXIT END;
			IF ch < " " THEN err(3); EXIT END;
			IF i < LEN(s) - 1 THEN s[i] := ch
			ELSIF i = LEN(s) - 1 THEN s[i] := 0X; NEW(t, 2 * LEN(s)); t^ := s$; t^[i] := ch
			ELSIF i < LEN(t^) - 1 THEN t^[i] := ch
			ELSE str := t; str^[i] := 0X; NEW(t, 2 * LEN(str^)); t^ := str^$; t^[i] := ch
			END;
			INC(i)
		END;
		IF i = 1 THEN sym := number; numtyp := 1; intval := ORD(s[0]);
			IF s[0] < " " THEN err(3) END
		ELSE
			sym := string; numtyp := 0; intval := i + 1; NEW(str, intval);
			IF i < LEN(s) THEN s[i] := 0X; str^ := s$
			ELSE t^[i] := 0X; str^ := t^$
			END
		END;
		OPM.Get(ch)
	END Str;

	PROCEDURE Identifier(VAR sym: BYTE);
		VAR i: SHORTINT;
	BEGIN i := 0;
		REPEAT
			name[i] := ch; INC(i); OPM.Get(ch)
		UNTIL (ch < "0") OR ("9" < ch) & (CAP(ch) < "A") OR ("Z" < CAP(ch)) & (ch # "_") OR (i = MaxIdLen);
		IF i = MaxIdLen THEN err(240); DEC(i) END ;
		name[i] := 0X; sym := ident
	END Identifier;

	PROCEDURE Number;
		VAR i, m, n, d, e: SHORTINT; dig: ARRAY 24 OF SHORTCHAR; f: REAL; expCh: SHORTCHAR; neg: BOOLEAN;

		PROCEDURE Ten(e: SHORTINT): REAL;
			VAR x, p: REAL;
		BEGIN x := 1; p := 10;
			WHILE e > 0 DO
				IF ODD(e) THEN x := x*p END;
				e := SHORT(e DIV 2);
				IF e > 0 THEN p := p*p END (* prevent overflow *)
			END;
			RETURN x
		END Ten;

		PROCEDURE Ord(ch: SHORTCHAR; hex: BOOLEAN): SHORTINT;
		BEGIN (* ("0" <= ch) & (ch <= "9") OR ("A" <= ch) & (ch <= "F") *)
			IF ch <= "9" THEN RETURN SHORT(ORD(ch) - ORD("0"))
			ELSIF hex THEN RETURN SHORT(ORD(ch) - ORD("A") + 10)
			ELSE err(2); RETURN 0
			END
		END Ord;

	BEGIN (* ("0" <= ch) & (ch <= "9") *)
		i := 0; m := 0; n := 0; d := 0;
		LOOP (* read mantissa *)
			IF ("0" <= ch) & (ch <= "9") OR (d = 0) & ("A" <= ch) & (ch <= "F") THEN
				IF (m > 0) OR (ch # "0") THEN (* ignore leading zeros *)
					IF n < LEN(dig) THEN dig[n] := ch; INC(n) END;
					INC(m)
				END;
				OPM.Get(ch); INC(i)
			ELSIF ch = "." THEN OPM.Get(ch);
				IF ch = "." THEN (* ellipsis *) ch := 7FX; EXIT
				ELSIF d = 0 THEN (* i > 0 *) d := i
				ELSE err(2)
				END
			ELSE EXIT
			END
		END; (* 0 <= n <= m <= i, 0 <= d <= i *)
		IF d = 0 THEN (* integer *)
			IF n = m THEN intval := 0; i := 0;
				IF ch = "X" THEN (* character *) OPM.Get(ch); numtyp := char;
					IF n <= 2 THEN
						WHILE i < n DO intval := intval*10H + Ord(dig[i], TRUE); INC(i) END
					ELSE err(203)
					END
				ELSIF ch = "H" THEN (* hexadecimal *) OPM.Get(ch); numtyp := integer;
					IF (OPM.Language = "3") OR (OPM.Language = "7") THEN m := 2*SIZE(LONGINT)
					ELSE m := 2*SIZE(INTEGER)
					END;
					IF n <= m THEN
						IF (n = m) & (dig[0] > "7") THEN (* prevent overflow *) intval := -1;
							IF (OPM.Language = "3") OR (OPM.Language = "7") THEN err(203) END
						END;
						WHILE i < n DO intval := intval*10H + Ord(dig[i], TRUE); INC(i) END;
						IF (OPM.Language = "7") & (intval > MAX(INTEGER)) THEN err(-203) END
					ELSE err(203); intval := 1 (* to prevent "division by zero" on DIV 10000000000000000H *)
					END
				ELSIF (ch = "L") & (OPM.Language # "3") & (OPM.Language # "7") THEN (* long hex *)
					OPM.Get(ch); numtyp := integer;
					IF n <= 2*SIZE(LONGINT) THEN
						IF (n = 2*SIZE(LONGINT)) & (dig[0] > "7") THEN (* prevent overflow *) intval := -1 END;
						WHILE i < n DO intval := intval*10H + Ord(dig[i], TRUE); INC(i) END
					ELSE err(203); intval := 1 (* to prevent "division by zero" on DIV 10000000000000000L *)
					END
				ELSE (* decimal *) numtyp := integer;
					WHILE i < n DO d := Ord(dig[i], FALSE); INC(i);
						IF intval <= (MAX(LONGINT) - d) DIV 10 THEN intval := intval*10 + d
						ELSE err(203)
						END
					END;
					IF (OPM.Language = "7") & (intval > MAX(INTEGER)) THEN err(-203) END
				END
			ELSE err(203)
			END
		ELSE (* fraction *)
			f := 0; e := 0; expCh := "E";
			WHILE n > 0 DO (* 0 <= f < 1 *) DEC(n); f := (Ord(dig[n], FALSE) + f)/10 END;
			IF (ch = "E") OR (ch = "D") THEN expCh := ch; OPM.Get(ch); neg := FALSE;
				IF ch = "-" THEN neg := TRUE; OPM.Get(ch)
				ELSIF ch = "+" THEN OPM.Get(ch)
				END;
				IF ("0" <= ch) & (ch <= "9") THEN
					REPEAT n := Ord(ch, FALSE); OPM.Get(ch);
						IF e <= (MAX(SHORTINT) - n) DIV 10 THEN e := SHORT(e*10 + n)
						ELSE err(203)
						END
					UNTIL (ch < "0") OR ("9" < ch);
					IF neg THEN e := SHORT(-e) END
				ELSE err(2)
				END
			END;
			DEC(e, i-d-m); (* decimal point shift *)
			IF expCh = "E" THEN numtyp := real;
				IF (1-OPM.MaxRExp < e) & (e <= OPM.MaxRExp) THEN
					IF e < 0 THEN realval := SHORT(f / Ten(SHORT(-e)))
					ELSE realval := SHORT(f * Ten(e))
					END
				ELSE err(203)
				END
			ELSE numtyp := longreal;
				IF (1-OPM.MaxLExp < e) & (e <= OPM.MaxLExp) THEN
					IF e < 0 THEN lrlval := f / Ten(SHORT(-e))
					ELSE lrlval := f * Ten(e)
					END
				ELSE err(203)
				END
			END
		END
	END Number;

	PROCEDURE Get*(VAR sym: BYTE);
		VAR s: BYTE;

		PROCEDURE Comment;	(* do not read after end of file *)
		BEGIN OPM.Get(ch);
			LOOP
				LOOP
					WHILE ch = "(" DO OPM.Get(ch);
						IF ch = "*" THEN Comment END
					END ;
					IF ch = "*" THEN OPM.Get(ch); EXIT END ;
					IF ch = OPM.Eot THEN EXIT END ;
					OPM.Get(ch)
				END ;
				IF ch = ")" THEN OPM.Get(ch); EXIT END ;
				IF ch = OPM.Eot THEN err(5); EXIT END
			END
		END Comment;

	BEGIN
		OPM.errpos := OPM.curpos-1;
		WHILE ch <= " " DO (*ignore control characters*)
			IF ch = OPM.Eot THEN sym := eof; RETURN
			ELSE OPM.Get(ch)
			END
		END ;
		CASE ch OF   (* ch > " " *)
			| 22X, 27X  : Str(s)
			| "#"  : s := neq; OPM.Get(ch)
			| "&"  : s :=  and; OPM.Get(ch)
			| "("  : OPM.Get(ch);
							 IF ch = "*" THEN Comment; Get(s)
								 ELSE s := lparen
							 END
			| ")"  : s := rparen; OPM.Get(ch)
			| "*"  : s :=  times; OPM.Get(ch)
			| "+"  : s :=  plus; OPM.Get(ch)
			| ","  : s := comma; OPM.Get(ch)
			| "-"  : s :=  minus; OPM.Get(ch)
			| "."  : OPM.Get(ch);
							 IF ch = "." THEN OPM.Get(ch); s := upto ELSE s := period END
			| "/"  : s := slash;  OPM.Get(ch)
			| "0".."9": Number; s := number
			| ":"  : OPM.Get(ch);
							 IF ch = "=" THEN OPM.Get(ch); s := becomes ELSE s := colon END
			| ";"  : s := semicolon; OPM.Get(ch)
			| "<"  : OPM.Get(ch);
							 IF ch = "=" THEN OPM.Get(ch); s := leq ELSE s := lss END
			| "="  : s :=  eql; OPM.Get(ch)
			| ">"  : OPM.Get(ch);
							 IF ch = "=" THEN OPM.Get(ch); s := geq ELSE s := gtr END
			| "A": Identifier(s); IF name = "ARRAY" THEN s := array END
			| "B": Identifier(s);
						IF name = "BEGIN" THEN s := begin
						ELSIF name = "BY" THEN s := by
						END
			| "C": Identifier(s);
						IF name = "CASE" THEN s := case
						ELSIF name = "CONST" THEN s := const
						END
			| "D": Identifier(s);
						IF name = "DO" THEN s := do
						ELSIF name = "DIV" THEN s := div
						ELSIF ((OPM.Language = "C") OR (OPM.Language = "3")) & (name = "DIV0") THEN s := div0
						END
			| "E": Identifier(s);
						IF name = "END" THEN s := end
						ELSIF name = "ELSE" THEN s := else
						ELSIF name = "ELSIF" THEN s := elsif
						ELSIF name = "EXIT" THEN s := exit
						END
			| "F": Identifier(s); IF name = "FOR" THEN s := for END
			| "I": Identifier(s);
						IF name = "IF" THEN s := if
						ELSIF name = "IN" THEN s := in
						ELSIF name = "IS" THEN s := is
						ELSIF name = "IMPORT" THEN s := import
						END
			| "L": Identifier(s); IF name = "LOOP" THEN s := loop END
			| "M": Identifier(s);
						IF name = "MOD" THEN s := mod
						ELSIF name = "MODULE" THEN s := module
						END
			| "N": Identifier(s); IF name = "NIL" THEN s := nil END
			| "O": Identifier(s);
						IF name = "OR" THEN s := or
						ELSIF name = "OF" THEN s := of
						ELSIF (OPM.Language = "C") & (name = "OUT") THEN s := out
						END
			| "P": Identifier(s);
						IF name = "PROCEDURE" THEN s := procedure
						ELSIF name = "POINTER" THEN s := pointer
						END
			| "R": Identifier(s);
						IF name = "RECORD" THEN s := record
						ELSIF ((OPM.Language = "C") OR (OPM.Language = "3")) & (name = "REM0") THEN s := rem0
						ELSIF name = "REPEAT" THEN s := repeat
						ELSIF name = "RETURN" THEN s := return
						END
			| "T": Identifier(s);
						IF name = "THEN" THEN s := then
						ELSIF name = "TO" THEN s := to
						ELSIF name = "TYPE" THEN s := type
						END
			| "U": Identifier(s); IF name = "UNTIL" THEN s := until END
			| "V": Identifier(s); IF name = "VAR" THEN s := var END
			| "W": Identifier(s);
						IF name = "WHILE" THEN s := while
						ELSIF name = "WITH" THEN s := with
						END
			| "G".."H", "J", "K", "Q", "S", "X".."Z", "_": Identifier(s)
			| "["  : s := lbrak; OPM.Get(ch)
			| "]"  : s := rbrak; OPM.Get(ch)
			| "^"  : s := arrow; OPM.Get(ch)
			| "$"  : s := dollar; OPM.Get(ch)
			| "a".."z": Identifier(s)
			| "{"  : s := lbrace; OPM.Get(ch)
			| "|"  : s := bar; OPM.Get(ch)
			| "}"  : s := rbrace; OPM.Get(ch)
			| "~"  : s := not; OPM.Get(ch)
			| 7FX  : s := upto; OPM.Get(ch)
		ELSE s :=  null; OPM.Get(ch)
		END ;
		sym := s
	END Get;

	PROCEDURE Init*;
	BEGIN ch := " "
	END Init;

END OfrontOPS.
