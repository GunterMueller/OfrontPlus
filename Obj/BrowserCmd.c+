/* Ofront+ 1.0 -mC -48 */
#include "SYSTEM.h"
#include "Args.h"
#include "Console.h"
#include "OfrontOPM.h"
#include "OfrontOPS.h"
#include "OfrontOPT.h"
#include "OfrontOPV.h"
#include "Strings.h"
#include "Texts.h"


static Texts_Writer BrowserCmd_W;
static CHAR BrowserCmd_lang, BrowserCmd_option;


static void BrowserCmd_Ident (CHAR *name, INTEGER name__len, CHAR *first, INTEGER first__len);
static void BrowserCmd_Indent (SHORTINT i);
static void BrowserCmd_Objects (OfrontOPT_Object obj, SET mode);
export void BrowserCmd_ShowDef (void);
static void BrowserCmd_WModule (OfrontOPS_Name name, Texts_Text T);
static void BrowserCmd_Wch (CHAR ch);
static void BrowserCmd_Wi (LONGINT i);
static void BrowserCmd_Wln (void);
static void BrowserCmd_Wmthd (OfrontOPT_Object obj);
static void BrowserCmd_Ws (CHAR *s, INTEGER s__len);
static void BrowserCmd_Wsign (OfrontOPT_Struct result, OfrontOPT_Object par);
static void BrowserCmd_Wstruct (OfrontOPT_Struct typ);
static void BrowserCmd_Wtype (OfrontOPT_Struct typ);


/*============================================================================*/

static void BrowserCmd_Ws (CHAR *s, INTEGER s__len)
{
	Texts_WriteString(&BrowserCmd_W, Texts_Writer__typ, (void*)s, s__len);
}

static void BrowserCmd_Wch (CHAR ch)
{
	Texts_Write(&BrowserCmd_W, Texts_Writer__typ, ch);
}

static void BrowserCmd_Wi (LONGINT i)
{
	Texts_WriteLongInt(&BrowserCmd_W, Texts_Writer__typ, i, 0);
}

static void BrowserCmd_Wln (void)
{
	Texts_WriteLn(&BrowserCmd_W, Texts_Writer__typ);
}

static void BrowserCmd_Indent (SHORTINT i)
{
	while ((INTEGER)i > 0) {
		BrowserCmd_Wch(' ');
		BrowserCmd_Wch(' ');
		i -= 1;
	}
}

static void BrowserCmd_Wsign (OfrontOPT_Struct result, OfrontOPT_Object par)
{
	BOOLEAN paren, res, first;
	first = 1;
	res = result != NIL && result != OfrontOPT_notyp;
	paren = res || par != NIL;
	if (paren) {
		BrowserCmd_Ws((CHAR*)" (", 3);
	}
	while (par != NIL) {
		if (!first) {
			BrowserCmd_Ws((CHAR*)"; ", 3);
		} else {
			first = 0;
		}
		if (BrowserCmd_option == 'x') {
			BrowserCmd_Wi(par->adr);
			BrowserCmd_Wch(' ');
		}
		if ((INTEGER)par->mode == 2) {
			if (BrowserCmd_lang == 'C') {
				if ((INTEGER)par->vis == 3) {
					BrowserCmd_Ws((CHAR*)"IN ", 4);
				} else if ((INTEGER)par->vis == 4) {
					BrowserCmd_Ws((CHAR*)"OUT ", 5);
				} else {
					BrowserCmd_Ws((CHAR*)"VAR ", 5);
				}
			} else if ((INTEGER)par->vis != 3) {
				BrowserCmd_Ws((CHAR*)"VAR ", 5);
			}
			if (__ODD((INTEGER)par->sysflag)) {
				BrowserCmd_Ws((CHAR*)"[nil] ", 7);
			}
		}
		BrowserCmd_Ws((void*)par->name->data, par->name->len[0]);
		while ((((par->link != NIL && par->link->typ == par->typ) && (INTEGER)par->link->mode == (INTEGER)par->mode) && (INTEGER)par->link->vis == (INTEGER)par->vis) && (INTEGER)par->link->sysflag == (INTEGER)par->sysflag) {
			par = par->link;
			BrowserCmd_Ws((CHAR*)", ", 3);
			BrowserCmd_Ws((void*)par->name->data, par->name->len[0]);
		}
		BrowserCmd_Ws((CHAR*)": ", 3);
		BrowserCmd_Wtype(par->typ);
		par = par->link;
	}
	if (paren) {
		BrowserCmd_Wch(')');
	}
	if (res) {
		BrowserCmd_Ws((CHAR*)": ", 3);
		BrowserCmd_Wtype(result);
	}
}

static void BrowserCmd_Objects (OfrontOPT_Object obj, SET mode)
{
	INTEGER i, m;
	SET s;
	OfrontOPS_String ext = NIL;
	if (obj != NIL) {
		BrowserCmd_Objects(obj->left, mode);
		if (__IN(obj->mode, mode)) {
			switch (obj->mode) {
				case 3: 
					BrowserCmd_Indent(2);
					BrowserCmd_Ws((void*)obj->name->data, obj->name->len[0]);
					BrowserCmd_Ws((CHAR*)" = ", 4);
					switch (obj->typ->form) {
						case 2: 
							if (obj->conval->intval == 1) {
								BrowserCmd_Ws((CHAR*)"TRUE", 5);
							} else {
								BrowserCmd_Ws((CHAR*)"FALSE", 6);
							}
							break;
						case 3: 
							if (obj->conval->intval == 34) {
								BrowserCmd_Wch('\'');
								BrowserCmd_Wch('\"');
								BrowserCmd_Wch('\'');
							} else if (obj->conval->intval >= 32 && obj->conval->intval <= 126) {
								BrowserCmd_Wch('\"');
								BrowserCmd_Wch((CHAR)obj->conval->intval);
								BrowserCmd_Wch('\"');
							} else {
								i = __ASHR((INTEGER)obj->conval->intval, 4, INTEGER);
								if (i > 9) {
									BrowserCmd_Wch((CHAR)(55 + i));
								} else {
									BrowserCmd_Wch((CHAR)(48 + i));
								}
								i = __MASK((INTEGER)obj->conval->intval, -16);
								if (i > 9) {
									BrowserCmd_Wch((CHAR)(55 + i));
								} else {
									BrowserCmd_Wch((CHAR)(48 + i));
								}
								BrowserCmd_Wch('X');
							}
							break;
						case 1: case 4: case 5: case 6: 
							BrowserCmd_Wi(obj->conval->intval);
							break;
						case 9: 
							BrowserCmd_Wch('{');
							i = 0;
							s = obj->conval->setval;
							while (i <= 31) {
								if (__IN(i, s)) {
									BrowserCmd_Wi(i);
									s &= ~__SETOF(i);
									if (s != 0x0) {
										BrowserCmd_Ws((CHAR*)", ", 3);
									}
								}
								i += 1;
							}
							BrowserCmd_Wch('}');
							break;
						case 7: 
							Texts_WriteReal(&BrowserCmd_W, Texts_Writer__typ, obj->conval->realval, 16);
							break;
						case 8: 
							Texts_WriteLongReal(&BrowserCmd_W, Texts_Writer__typ, obj->conval->realval, 23);
							break;
						case 10: 
							if (Strings_Pos((CHAR*)"\"", 2, (void*)obj->conval->ext->data, obj->conval->ext->len[0], 0) == -1) {
								BrowserCmd_Wch('\"');
								BrowserCmd_Ws((void*)obj->conval->ext->data, obj->conval->ext->len[0]);
								BrowserCmd_Wch('\"');
							} else {
								BrowserCmd_Wch('\'');
								BrowserCmd_Ws((void*)obj->conval->ext->data, obj->conval->ext->len[0]);
								BrowserCmd_Wch('\'');
							}
							break;
						case 11: 
							BrowserCmd_Ws((CHAR*)"NIL", 4);
							break;
						default: __CASECHK("BrowserCmd", 31999);
					}
					BrowserCmd_Wch(';');
					BrowserCmd_Wln();
					break;
				case 5: 
					if (obj->name != OfrontOPT_null) {
						BrowserCmd_Indent(2);
						if (obj->typ->strobj == obj) {
							BrowserCmd_Wtype(obj->typ);
							BrowserCmd_Ws((CHAR*)" = ", 4);
							BrowserCmd_Wstruct(obj->typ);
						} else {
							BrowserCmd_Ws((void*)obj->name->data, obj->name->len[0]);
							BrowserCmd_Ws((CHAR*)" = ", 4);
							BrowserCmd_Wtype(obj->typ);
						}
						BrowserCmd_Wch(';');
						BrowserCmd_Wln();
					}
					break;
				case 1: 
					BrowserCmd_Indent(2);
					BrowserCmd_Ws((void*)obj->name->data, obj->name->len[0]);
					if ((INTEGER)obj->vis == 2) {
						BrowserCmd_Ws((CHAR*)"-: ", 4);
					} else {
						BrowserCmd_Ws((CHAR*)": ", 3);
					}
					BrowserCmd_Wtype(obj->typ);
					BrowserCmd_Wch(';');
					BrowserCmd_Wln();
					break;
				case 7: case 9: case 10: 
					BrowserCmd_Indent(1);
					BrowserCmd_Ws((CHAR*)"PROCEDURE", 10);
					if ((INTEGER)obj->mode == 10) {
						BrowserCmd_Wch('+');
					} else if ((INTEGER)obj->mode == 9) {
						BrowserCmd_Wch('-');
					}
					BrowserCmd_Wch(' ');
					if ((INTEGER)obj->sysflag != 0) {
						BrowserCmd_Ws((CHAR*)"[stdcall] ", 11);
					}
					BrowserCmd_Ws((void*)obj->name->data, obj->name->len[0]);
					BrowserCmd_Wsign(obj->typ, obj->link);
					if ((INTEGER)obj->mode == 9) {
						ext = obj->conval->ext;
						if (ext != NIL) {
							m = ext->len[0];
							i = 0;
							BrowserCmd_Ws((CHAR*)" \"", 3);
							while (i < m) {
								BrowserCmd_Wch((ext->data)[__X(i, ext->len[0], "BrowserCmd", 38435)]);
								i += 1;
							}
							BrowserCmd_Wch('\"');
						}
					}
					BrowserCmd_Wch(';');
					BrowserCmd_Wln();
					break;
				default: __CASECHK("BrowserCmd", 39679);
			}
		}
		BrowserCmd_Objects(obj->right, mode);
	}
}

static void BrowserCmd_Wmthd (OfrontOPT_Object obj)
{
	if (obj != NIL) {
		BrowserCmd_Wmthd(obj->left);
		if ((INTEGER)obj->mode == 13 && (obj->name->data != "@tproc" || BrowserCmd_option == 'x')) {
			BrowserCmd_Indent(3);
			BrowserCmd_Ws((CHAR*)"PROCEDURE (", 12);
			if (obj->name->data != "@tproc") {
				if ((INTEGER)obj->link->mode == 2) {
					if (BrowserCmd_lang == 'C') {
						if ((INTEGER)obj->link->vis == 3) {
							BrowserCmd_Ws((CHAR*)"IN ", 4);
						} else if ((INTEGER)obj->link->vis == 4) {
							BrowserCmd_Ws((CHAR*)"OUT ", 5);
						} else {
							BrowserCmd_Ws((CHAR*)"VAR ", 5);
						}
					} else if ((INTEGER)obj->link->vis != 3) {
						BrowserCmd_Ws((CHAR*)"VAR ", 5);
					}
					if (__ODD((INTEGER)obj->link->sysflag)) {
						BrowserCmd_Ws((CHAR*)"[nil] ", 7);
					}
				}
				BrowserCmd_Ws((void*)obj->link->name->data, obj->link->name->len[0]);
				BrowserCmd_Ws((CHAR*)": ", 3);
				BrowserCmd_Wtype(obj->link->typ);
			}
			BrowserCmd_Ws((CHAR*)") ", 3);
			BrowserCmd_Ws((void*)obj->name->data, obj->name->len[0]);
			BrowserCmd_Wsign(obj->typ, obj->link->link);
			if (BrowserCmd_lang == 'C') {
				if (__IN(16, (SET)obj->link->typ->attribute)) {
					BrowserCmd_Ws((CHAR*)", NEW", 6);
				}
				if (__IN(17, (SET)obj->link->typ->attribute)) {
					BrowserCmd_Ws((CHAR*)", ABSTRACT", 11);
				} else if (__IN(19, (SET)obj->link->typ->attribute)) {
					BrowserCmd_Ws((CHAR*)", EMPTY", 8);
				} else if (__IN(20, (SET)obj->link->typ->attribute)) {
					BrowserCmd_Ws((CHAR*)", EXTENSIBLE", 13);
				}
			}
			BrowserCmd_Wch(';');
			if (BrowserCmd_option == 'x') {
				BrowserCmd_Indent(1);
				BrowserCmd_Ws((CHAR*)"(* methno: ", 12);
				BrowserCmd_Wi(__ASHR(obj->adr, 16, INTEGER));
				BrowserCmd_Ws((CHAR*)" *)", 4);
			}
			BrowserCmd_Wln();
		}
		BrowserCmd_Wmthd(obj->right);
	}
}

static struct Wstruct__16 {
	OfrontOPT_Struct *typ;
	struct Wstruct__16 *lnk;
} *Wstruct__16_s;

static void SysFlag__17 (void);

static void SysFlag__17 (void)
{
	if (BrowserCmd_option == 'x' && (INTEGER)(*Wstruct__16_s->typ)->sysflag != 0) {
		BrowserCmd_Ws((CHAR*)" [", 3);
		BrowserCmd_Wi((*Wstruct__16_s->typ)->sysflag);
		BrowserCmd_Wch(']');
	} else if (__ODD((*Wstruct__16_s->typ)->sysflag)) {
		BrowserCmd_Ws((CHAR*)" [notag]", 9);
	}
}

static void BrowserCmd_Wstruct (OfrontOPT_Struct typ)
{
	OfrontOPT_Object fld = NIL;
	struct Wstruct__16 _s;
	_s.typ = &typ;
	_s.lnk = Wstruct__16_s;
	Wstruct__16_s = &_s;
	switch (typ->form) {
		case 0: 
			BrowserCmd_Ws((CHAR*)"Undef", 6);
			break;
		case 13: 
			BrowserCmd_Ws((CHAR*)"POINTER", 8);
			SysFlag__17();
			BrowserCmd_Ws((CHAR*)" TO ", 5);
			BrowserCmd_Wtype(typ->BaseTyp);
			break;
		case 14: 
			BrowserCmd_Ws((CHAR*)"PROCEDURE", 10);
			if ((INTEGER)typ->sysflag != 0) {
				BrowserCmd_Ws((CHAR*)" [stdcall]", 11);
			}
			BrowserCmd_Wsign(typ->BaseTyp, typ->link);
			break;
		case 15: 
			switch (typ->comp) {
				case 2: 
					BrowserCmd_Ws((CHAR*)"ARRAY", 6);
					SysFlag__17();
					BrowserCmd_Wch(' ');
					BrowserCmd_Wi(typ->n);
					BrowserCmd_Ws((CHAR*)" OF ", 5);
					BrowserCmd_Wtype(typ->BaseTyp);
					break;
				case 3: 
					BrowserCmd_Ws((CHAR*)"ARRAY", 6);
					SysFlag__17();
					BrowserCmd_Ws((CHAR*)" OF ", 5);
					BrowserCmd_Wtype(typ->BaseTyp);
					break;
				case 4: 
					if (BrowserCmd_lang == 'C') {
						if ((INTEGER)typ->attribute == 17) {
							BrowserCmd_Ws((CHAR*)"ABSTRACT ", 10);
						} else if ((INTEGER)typ->attribute == 18) {
							BrowserCmd_Ws((CHAR*)"LIMITED ", 9);
						} else if ((INTEGER)typ->attribute == 20) {
							BrowserCmd_Ws((CHAR*)"EXTENSIBLE ", 12);
						}
					}
					BrowserCmd_Ws((CHAR*)"RECORD", 7);
					SysFlag__17();
					if (typ->BaseTyp != NIL) {
						BrowserCmd_Ws((CHAR*)" (", 3);
						BrowserCmd_Wtype(typ->BaseTyp);
						BrowserCmd_Wch(')');
					}
					BrowserCmd_Wln();
					fld = typ->link;
					while (fld != NIL && (INTEGER)fld->mode == 4) {
						if (BrowserCmd_option == 'x' || (fld->name->data)[0] != '@') {
							BrowserCmd_Indent(3);
							if (BrowserCmd_option == 'x') {
								BrowserCmd_Wi(fld->adr);
								BrowserCmd_Wch(' ');
							}
							BrowserCmd_Ws((void*)fld->name->data, fld->name->len[0]);
							if ((INTEGER)fld->vis == 2) {
								BrowserCmd_Wch('-');
							}
							BrowserCmd_Ws((CHAR*)": ", 3);
							BrowserCmd_Wtype(fld->typ);
							BrowserCmd_Wch(';');
							BrowserCmd_Wln();
						}
						fld = fld->link;
					}
					BrowserCmd_Wmthd(typ->link);
					BrowserCmd_Indent(2);
					BrowserCmd_Ws((CHAR*)"END", 4);
					if (BrowserCmd_option == 'x') {
						BrowserCmd_Indent(1);
						BrowserCmd_Ws((CHAR*)"(* size: ", 10);
						BrowserCmd_Wi(typ->size);
						BrowserCmd_Ws((CHAR*)" align: ", 9);
						BrowserCmd_Wi(typ->align);
						BrowserCmd_Ws((CHAR*)" nofm: ", 8);
						BrowserCmd_Wi(typ->n);
						BrowserCmd_Ws((CHAR*)" *)", 4);
					}
					break;
				default: __CASECHK("BrowserCmd", 63231);
			}
			break;
		default: 
			if (typ->BaseTyp != OfrontOPT_undftyp) {
				BrowserCmd_Wtype(typ->BaseTyp);
			}
			break;
	}
	Wstruct__16_s = _s.lnk;
}

static void BrowserCmd_Wtype (OfrontOPT_Struct typ)
{
	OfrontOPT_Object obj = NIL;
	obj = typ->strobj;
	if (obj->name != OfrontOPT_null) {
		if ((INTEGER)typ->mno != 0) {
			BrowserCmd_Ws((void*)OfrontOPT_GlbMod[__X(typ->mno, 64, "BrowserCmd", 66358)]->name->data, OfrontOPT_GlbMod[__X(typ->mno, 64, "BrowserCmd", 66358)]->name->len[0]);
			BrowserCmd_Wch('.');
		} else if (typ == OfrontOPT_sysptrtyp) {
			BrowserCmd_Ws((CHAR*)"SYSTEM.", 8);
		} else if ((INTEGER)obj->vis == 0) {
			BrowserCmd_Wch('#');
		}
		if (BrowserCmd_lang == 'C' || BrowserCmd_lang == '3') {
			if (obj == OfrontOPT_chartyp->strobj) {
				BrowserCmd_Ws((CHAR*)"SHORTCHAR", 10);
			} else if (obj == OfrontOPT_bytetyp->strobj) {
				BrowserCmd_Ws((CHAR*)"BYTE", 5);
			} else if (obj == OfrontOPT_sinttyp->strobj) {
				BrowserCmd_Ws((CHAR*)"SHORTINT", 9);
			} else if (obj == OfrontOPT_inttyp->strobj) {
				BrowserCmd_Ws((CHAR*)"INTEGER", 8);
			} else if (obj == OfrontOPT_linttyp->strobj) {
				BrowserCmd_Ws((CHAR*)"LONGINT", 8);
			} else if (obj == OfrontOPT_realtyp->strobj) {
				BrowserCmd_Ws((CHAR*)"SHORTREAL", 10);
			} else if (obj == OfrontOPT_lrltyp->strobj) {
				BrowserCmd_Ws((CHAR*)"REAL", 5);
			} else if (obj == OfrontOPT_ubytetyp->strobj) {
				BrowserCmd_Ws((CHAR*)"UBYTE", 6);
			} else {
				BrowserCmd_Ws((void*)obj->name->data, obj->name->len[0]);
			}
		} else if (BrowserCmd_lang == '1' || BrowserCmd_lang == '2') {
			if (obj == OfrontOPT_chartyp->strobj) {
				BrowserCmd_Ws((CHAR*)"CHAR", 5);
			} else if (obj == OfrontOPT_bytetyp->strobj) {
				BrowserCmd_Ws((CHAR*)"SHORTINT", 9);
			} else if (obj == OfrontOPT_sinttyp->strobj) {
				BrowserCmd_Ws((CHAR*)"INTEGER", 8);
			} else if (obj == OfrontOPT_inttyp->strobj) {
				BrowserCmd_Ws((CHAR*)"LONGINT", 8);
			} else if (obj == OfrontOPT_linttyp->strobj) {
				BrowserCmd_Ws((CHAR*)"HUGEINT", 8);
			} else if (obj == OfrontOPT_realtyp->strobj) {
				BrowserCmd_Ws((CHAR*)"REAL", 5);
			} else if (obj == OfrontOPT_lrltyp->strobj) {
				BrowserCmd_Ws((CHAR*)"LONGREAL", 9);
			} else if (obj == OfrontOPT_ubytetyp->strobj) {
				BrowserCmd_Ws((CHAR*)"SYSTEM.UBYTE", 13);
			} else {
				BrowserCmd_Ws((void*)obj->name->data, obj->name->len[0]);
			}
		} else {
			if (obj == OfrontOPT_chartyp->strobj) {
				BrowserCmd_Ws((CHAR*)"CHAR", 5);
			} else if (obj == OfrontOPT_ubytetyp->strobj) {
				BrowserCmd_Ws((CHAR*)"BYTE", 5);
			} else if (obj == OfrontOPT_bytetyp->strobj) {
				BrowserCmd_Ws((CHAR*)"SYSTEM.INT8", 12);
			} else if (obj == OfrontOPT_sinttyp->strobj) {
				BrowserCmd_Ws((CHAR*)"SYSTEM.INT16", 13);
			} else if (obj == OfrontOPT_inttyp->strobj) {
				BrowserCmd_Ws((CHAR*)"INTEGER", 8);
			} else if (obj == OfrontOPT_linttyp->strobj) {
				BrowserCmd_Ws((CHAR*)"SYSTEM.INT64", 13);
			} else if (obj == OfrontOPT_realtyp->strobj) {
				BrowserCmd_Ws((CHAR*)"SYSTEM.REAL4", 13);
			} else if (obj == OfrontOPT_lrltyp->strobj) {
				BrowserCmd_Ws((CHAR*)"REAL", 5);
			} else {
				BrowserCmd_Ws((void*)obj->name->data, obj->name->len[0]);
			}
		}
	} else {
		if (BrowserCmd_option == 'x' && (INTEGER)typ->ref > 1282) {
			BrowserCmd_Wch('#');
			BrowserCmd_Wi((INTEGER)typ->ref - 1282);
			BrowserCmd_Wch(' ');
		}
		BrowserCmd_Wstruct(typ);
	}
}

static struct WModule__5 {
	Texts_Text *T;
	INTEGER *beg, *end;
	struct WModule__5 *lnk;
} *WModule__5_s;

static void CheckHeader__6 (void);
static void Header__8 (CHAR *s, INTEGER s__len);

static void Header__8 (CHAR *s, INTEGER s__len)
{
	*WModule__5_s->beg = BrowserCmd_W.buf->len;
	BrowserCmd_Indent(1);
	BrowserCmd_Ws((void*)s, s__len);
	BrowserCmd_Wln();
	*WModule__5_s->end = BrowserCmd_W.buf->len;
}

static void CheckHeader__6 (void)
{
	INTEGER len;
	len = (*WModule__5_s->T)->len;
	if (*WModule__5_s->end == BrowserCmd_W.buf->len) {
		Texts_Append(*WModule__5_s->T, BrowserCmd_W.buf);
		Texts_Delete(*WModule__5_s->T, len + *WModule__5_s->beg, len + *WModule__5_s->end);
	} else {
		BrowserCmd_Wln();
	}
}

static void BrowserCmd_WModule (OfrontOPS_Name name, Texts_Text T)
{
	SHORTINT i;
	INTEGER beg, end;
	BOOLEAN first, done;
	struct WModule__5 _s;
	_s.T = &T;
	_s.beg = &beg;
	_s.end = &end;
	_s.lnk = WModule__5_s;
	WModule__5_s = &_s;
	OfrontOPT_Import((CHAR*)"@notself", name, &done);
	if (done) {
		BrowserCmd_Ws((CHAR*)"DEFINITION ", 12);
		BrowserCmd_Ws((void*)name, 40);
		BrowserCmd_Wch(';');
		BrowserCmd_Wln();
		BrowserCmd_Wln();
		Header__8((CHAR*)"IMPORT", 7);
		i = 1;
		first = 1;
		while ((INTEGER)i < (INTEGER)OfrontOPT_nofGmod) {
			if (first) {
				first = 0;
				BrowserCmd_Indent(2);
			} else {
				BrowserCmd_Ws((CHAR*)", ", 3);
			}
			BrowserCmd_Ws((void*)OfrontOPT_GlbMod[__X(i, 64, "BrowserCmd", 84763)]->name->data, OfrontOPT_GlbMod[__X(i, 64, "BrowserCmd", 84763)]->name->len[0]);
			i += 1;
		}
		if (!first) {
			BrowserCmd_Wch(';');
			BrowserCmd_Wln();
		}
		CheckHeader__6();
		Header__8((CHAR*)"CONST", 6);
		BrowserCmd_Objects(OfrontOPT_GlbMod[0]->right, 0x08);
		CheckHeader__6();
		Header__8((CHAR*)"TYPE", 5);
		BrowserCmd_Objects(OfrontOPT_GlbMod[0]->right, 0x20);
		CheckHeader__6();
		Header__8((CHAR*)"VAR", 4);
		BrowserCmd_Objects(OfrontOPT_GlbMod[0]->right, 0x02);
		CheckHeader__6();
		BrowserCmd_Objects(OfrontOPT_GlbMod[0]->right, 0x0680);
		BrowserCmd_Wln();
		BrowserCmd_Ws((CHAR*)"END ", 5);
		BrowserCmd_Ws((void*)name, 40);
		BrowserCmd_Wch('.');
		BrowserCmd_Wln();
		Texts_Append(T, BrowserCmd_W.buf);
	} else {
		Texts_WriteString(&BrowserCmd_W, Texts_Writer__typ, (void*)name, 40);
		Texts_WriteString(&BrowserCmd_W, Texts_Writer__typ, (CHAR*)" -- symbol file not found", 26);
		Texts_WriteLn(&BrowserCmd_W, Texts_Writer__typ);
		Texts_Append(T, BrowserCmd_W.buf);
	}
	WModule__5_s = _s.lnk;
}

static void BrowserCmd_Ident (CHAR *name, INTEGER name__len, CHAR *first, INTEGER first__len)
{
	SHORTINT i, j;
	CHAR ch;
	i = 0;
	while (name[__X(i, name__len, "BrowserCmd", 89876)] != 0x00) {
		i += 1;
	}
	while ((INTEGER)i >= 0 && name[__X(i, name__len, "BrowserCmd", 90146)] != '/') {
		i -= 1;
	}
	i += 1;
	j = 0;
	ch = name[__X(i, name__len, "BrowserCmd", 90399)];
	while (ch != '.' && ch != 0x00) {
		first[__X(j, first__len, "BrowserCmd", 90672)] = ch;
		i += 1;
		j += 1;
		ch = name[__X(i, name__len, "BrowserCmd", 90703)];
	}
	first[__X(j, first__len, "BrowserCmd", 91135)] = 0x00;
}

void BrowserCmd_ShowDef (void)
{
	Texts_Text T = NIL, dummyT = NIL;
	OfrontOPS_Name S, vname, name;
	Texts_Reader R;
	CHAR ch;
	CHAR s[1024];
	SHORTINT i;
	BrowserCmd_option = 0x00;
	Args_Get(1, (void*)S, 40);
	if (Args_argc > 2) {
		if (S[0] == '-') {
			BrowserCmd_option = S[1];
			Args_Get(2, (void*)S, 40);
		} else {
			Args_Get(2, (void*)vname, 40);
			BrowserCmd_option = vname[1];
		}
	}
	switch (BrowserCmd_option) {
		case '1': case '2': case '3': case '7': 
			BrowserCmd_lang = BrowserCmd_option;
			break;
		default: 
			BrowserCmd_lang = 'C';
			break;
	}
	OfrontOPT_InitScope(BrowserCmd_lang);
	if (Args_argc >= 2) {
		BrowserCmd_Ident((void*)S, 40, (void*)name, 40);
		__NEW(T, Texts_TextDesc);
		Texts_Open(T, (CHAR*)"", 1);
		OfrontOPT_Init((void*)name, 40, 0x0);
		__MOVE("AvoidErr154", OfrontOPT_SelfName, 12);
		BrowserCmd_WModule(name, T);
		OfrontOPT_Close();
		Texts_OpenReader(&R, Texts_Reader__typ, T, 0);
		Texts_Read(&R, Texts_Reader__typ, &ch);
		i = 0;
		while (!R.eot) {
			if (ch == 0x0d) {
				s[__X(i, 1024, "BrowserCmd", 96031)] = 0x00;
				i = 0;
				Console_String((void*)s, 1024);
				Console_Ln();
			} else {
				s[__X(i, 1024, "BrowserCmd", 96275)] = ch;
				i += 1;
			}
			Texts_Read(&R, Texts_Reader__typ, &ch);
		}
		s[__X(i, 1024, "BrowserCmd", 97293)] = 0x00;
		Console_String((void*)s, 1024);
	}
}

/*----------------------------------------------------------------------------*/
static void EnumPtrs(void (*P)(void*))
{
	__ENUMR(&BrowserCmd_W, Texts_Writer__typ, 56, 1, P);
}


int main(int argc, char **argv)
{
	__INIT(argc, argv);
	__IMPORT(Args__init);
	__IMPORT(Console__init);
	__IMPORT(OfrontOPM__init);
	__IMPORT(OfrontOPS__init);
	__IMPORT(OfrontOPT__init);
	__IMPORT(OfrontOPV__init);
	__IMPORT(Strings__init);
	__IMPORT(Texts__init);
	__REGMAIN("BrowserCmd", EnumPtrs);
	__REGCMD("ShowDef", BrowserCmd_ShowDef);
/* BEGIN */
	OfrontOPT_typSize = OfrontOPV_TypSize;
	Texts_OpenWriter(&BrowserCmd_W, Texts_Writer__typ);
	BrowserCmd_ShowDef();
	__FINI;
}
